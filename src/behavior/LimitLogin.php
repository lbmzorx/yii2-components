<?php
/**
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2008 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */

namespace lbmzorx\components\behavior;

use Yii;
use lbmzorx\components\event\LoginEvent;
use yii\base\Behavior;
use yii\caching\TagDependency;
use yii\log\Logger;
use yii\web\BadRequestHttpException;
use yii\web\HttpException;

/**
 *
 * @author Qiang Xue <qiang.xue@gmail.com>
 * @author Alexander Kochetov <creocoder@gmail.com>
 * @since 2.0
 */
class LimitLogin extends Behavior
{
    const TAG_LOGIN_FATAL='LOGIN_FATAL';

    public $category='app';
    public $limitCount=5;
    public $maxErrorCount=10;

    public $attribute;
    /**
     * expire to remove limit account
     * @var $expire
     */
    public $expire;

    public $prefix='LE_';
    public function events()
    {
        return [
            LoginEvent::EVENT_BEFORE_LOGIN=>'beforeLogin',
            LoginEvent::EVENT_FAILED_LOGIN=>'failedLogin',
            LoginEvent::EVENT_SUCCESS_LOGIN=>'successLogin',
        ]; // TODO: Change the autogenerated stub
    }

    public function failedLogin($event){
        $model=$event->sender;
        $key=[$this->getIpKey(),self::TAG_LOGIN_FATAL];
        if($error=Yii::$app->cache->get($key)){
            $error['count']=isset($error['count'])?($error['count']+1):1;
            if($error['count']>5){
                $lockTime=intval(1+('1E'.($error['count']-6)));
                $error['lock_time']=(time()+30*($error['count']-5)*($error['count']-5)*($error['count']-5)+$lockTime);
            }
            /**
             * @var $model \yii\base\Model
             */
            $model->addError($this->attribute,Yii::t($this->category,'You have {count} times to Failed login ',['count'=>$error['count']]));
        }else{
            $error=[
                'count'=>1,
                'expire'=>strtotime(date('Y-m-d',strtotime('+1 day'))),
            ];
        }
        Yii::$app->cache->set($key,$error,3600*24,new TagDependency(['tags'=>self::TAG_LOGIN_FATAL]));
    }

    public function successLogin($event){
        $key=[$this->getIpKey(),self::TAG_LOGIN_FATAL];
        Yii::$app->cache->delete($key);
        $msg=yii::t($this->category,'Success Login');
        \yii::$app->getSession()->setFlash('success',$msg);
    }

    public function beforeLogin($event){
        $key=[$this->getIpKey(),self::TAG_LOGIN_FATAL];
        $error=Yii::$app->cache->get($key);
        $model=$event->sender;

        if( !empty($error) && (isset($error['expire']) && $error['expire']>time())){
            if(isset($error['lock_time'])){
                if( $error['count']<=$this->maxErrorCount ){
                    if($error['count']>$this->limitCount && isset($error['lock_time']) && $error['lock_time']>time()){
                        $msg=yii::t($this->category,'You have failed to try login more than {count}times, please wait {time}s',['time'=>$error['lock_time']-time(),'count'=>$error['count']]);
                        \yii::$app->getSession()->setFlash('warning',$msg);
                        /**
                         * @var $model \yii\base\Model
                         */
                        $model->addError($this->attribute,$msg);
                        throw new HttpException(200,$msg);
                    }
                }else{
                    $msg=yii::t($this->category,'You have failed to try login more than 10times, please try tomorrow!');
                    \yii::$app->getSession()->setFlash('error',$msg);
                    /**
                     * @var $model \yii\base\Model
                     */
                    $model->addError($this->attribute,$msg);
                    $msg='IP:'.\yii::$app->request->userIP.' key='.serialize($key).' Event=Failed Login , More then 10.';
                    \yii::$app->log->logger->log($msg,Logger::LEVEL_ERROR);
                    throw new BadRequestHttpException($msg);
                }
            }
        }
    }

    public function getIpKey(){
        return $this->prefix.\yii::$app->request->userIP;
    }
}
