<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/2/2
 * Time: 0:09
 */

namespace lbmzorx\components\helper;

use yii\base\BaseObject;
use yii\base\Exception;
use yii\web\BadRequestHttpException;

class Rsaenctype extends BaseObject
{
    /**
     * 配置
     * @var array
     */
    public $config=array(
        "private_key_bits" => 2048,                     //字节数    512 1024  2048   4096 等
        "private_key_type" => OPENSSL_KEYTYPE_RSA,     //加密类型
    );

    public $privKey;
    public $pubKey;

    public static $sessionRsaKey='rsaKey';

    public function init()
    {
        if(strtoupper(substr(PHP_OS,0,3))==='WIN'){
            $this->config['config']='D:\phpStudy\Apache\conf/openssl.cnf';
        }
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * 生成一对公私密钥 成功返回 公私密钥数组 失败 返回 false
     */
    public function create_key() {
        $res = openssl_pkey_new($this->config);
        if($res == false) return false;
        openssl_pkey_export($res, $privKey, null, $this->config);
        $public_key = openssl_pkey_get_details($res);

        $this->privKey=$privKey;
        $this->pubKey=$public_key["key"];
        openssl_free_key($res);
        return array('public_key'=>$public_key["key"],'private_key'=>$privKey);
    }

    /**
     * 用私密钥加密
     */
    public function private_encrypt($input) {
        openssl_private_encrypt($input,$output,$this->privKey);
        return base64_encode($output);
    }

    /**
     * 解密 私密钥加密后的密文
     */
    public function public_decrypt($input) {
        openssl_public_decrypt(base64_decode($input),$output,$this->pubKey);
        return $output;
    }

    /**
     * 用公密钥加密
     */
    public function public_encrypt($input) {
        openssl_public_encrypt($input,$output,$this->pubKey);
        return base64_encode($output);
    }

    /**
     * 解密 公密钥加密后的密文
     */
    public function private_decrypt($input) {
        openssl_private_decrypt(base64_decode($input),$output,$this->privKey,OPENSSL_PKCS1_PADDING);
        return $output;
    }

    public function keepSessionRsa(){
        $session=\yii::$app->getSession();
        $sessionRsa=$session->get(self::$sessionRsaKey);

        if($sessionRsa && isset($sessionRsa['public_key']) && $sessionRsa['public_key'] && isset($sessionRsa['private_key']) && $sessionRsa['private_key']){
            $this->privKey=$sessionRsa['private_key'];
            $this->pubKey=$sessionRsa['public_key'];
            return $sessionRsa;
        }else{
            if( !$this->privKey || !$this->pubKey){
                $this->create_key();
            }
            $session->set(self::$sessionRsaKey,['public_key'=>static::trimPubKey($this->pubKey),'private_key'=>$this->privKey]);
        }
    }

    public static function trimPubKey($pubKey){
        if(preg_match('/[\-]+BEGIN\sPUBLIC\sKEY[\-]+(?P<pubKey>[.\s\S]+)\-\-\-\-\-END\sPUBLIC\sKEY[\-]+/',$pubKey,$match)){
            return trim(str_replace("\n",'',$match['pubKey']));
        }else{
            return false;
        }
    }

    public static function getPubKey($isSession=false){
        if($isSession){
            $rsa=\yii::$app->getSession()->get(self::$sessionRsaKey);
            if(!empty($rsa['public_key'])){
                return $rsa['public_key'];
            }
        }
        try{
            $rsa = \Yii::createObject(self::className());
            $rsa->create_key();
            if($isSession){
                $rsa->keepSessionRsa();
            }
            return static::trimPubKey($rsa->pubKey);
        }catch (Exception $e){
            \yii::$app->getSession()->setFlash('error','Failed get public key');
        }
        return false;
    }

    public static function sessionDecryptPrivate($input,$reRsa=false){
        $rsaSession=\yii::$app->getSession()->get(self::$sessionRsaKey);
        if(empty($rsaSession['private_key'])){
            return '.';
        }
        $rsa=\yii::createObject(['class'=>self::className(),'privKey'=>$rsaSession['private_key']]);
        try{
            if($reRsa==true){
                return ['res'=>$rsa->private_decrypt($input),'rsa'=>$rsa];
            }
            return $rsa->private_decrypt($input);
        }catch (Exception $e){
            return ['res'=>'.'];
        }
    }

}
